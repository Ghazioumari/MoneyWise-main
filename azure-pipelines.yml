trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
  paths:
    include:
    - '*'

pr:
  branches:
    include:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOCKER_REPOSITORY: 'your-docker-repo'
  IMAGE_NAME: 'moneywise'
  IMAGE_TAG: '$(Build.BuildId)'
  SONAR_TOKEN: $(SONAR_TOKEN)
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
- stage: Build
  displayName: 'Build & Test'
  jobs:
  - job: BuildTest
    displayName: 'Build and Test'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    # SonarQube Analysis
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        projectKey: 'moneywise'
        projectName: 'MoneyWise'

    - task: SonarQubeAnalyze@5

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

    # Docker Build & Push
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: '$(DOCKER_REPOSITORY)/$(IMAGE_NAME)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(IMAGE_TAG)
          latest

    # Publish Artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'
      displayName: 'Publish Artifacts'

- stage: Security
  displayName: 'Security Scan'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Run Security Scans'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # OWASP Dependency Check
    - task: dependency-check-build-task@5
      inputs:
        projectName: 'MoneyWise'
        scanPath: '$(Build.SourcesDirectory)'
        format: 'HTML'
      displayName: 'OWASP Dependency Check'

    # Publish Security Report
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/dependency-check-report.html'
        artifactName: 'SecurityReports'
      displayName: 'Publish Security Report'

- stage: QualityGate
  displayName: 'Quality Gate'
  dependsOn: Build
  jobs:
  - job: CodeAnalysis
    displayName: 'Code Analysis'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Run Code Coverage
    - task: Maven@3
      inputs:
        mavenPomFile: 'backend/pom.xml'
        goals: 'verify'
        options: '$(MAVEN_OPTS) -Pcoverage'
        publishJUnitResults: false
      displayName: 'Run Code Coverage'

    # Publish Code Coverage
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/site/jacoco/jacoco.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/site/jacoco'
      displayName: 'Publish Code Coverage'

- stage: Deploy
  jobs:
  - job: Deploy
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(Pipeline.Workspace)'

    # Add IIS deployment steps here
    - task: IISWebAppDeploymentOnMachineGroup@0
      inputs:
        WebSiteName: 'MoneyWise'
        Package: '$(Pipeline.Workspace)/**/*.zip'
