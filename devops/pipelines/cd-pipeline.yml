trigger: none # CD pipeline is triggered after CI pipeline

parameters:
- name: Environment
  type: string
  default: 'dev'
  values:
  - dev
  - staging
  - prod

variables:
  backendImage: 'moneywise-backend'
  frontendImage: 'moneywise-frontend'

stages:
- stage: Deploy
  jobs:
  - job: DeployApplication
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: '$(System.DefinitionId)'
        specificBuildWithTriggering: true
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: Docker@2
      inputs:
        command: 'pull'
        arguments: '$(backendImage):$(Build.BuildNumber)'

    - task: Docker@2
      inputs:
        command: 'pull'
        arguments: '$(frontendImage):$(Build.BuildNumber)'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Create network if it doesn't exist
          docker network create moneywise-${{ parameters.Environment }} || true
          
          # Deploy Backend
          docker run -d \
            --name moneywise-backend-${{ parameters.Environment }} \
            --network moneywise-${{ parameters.Environment }} \
            -p 8081:8081 \
            $(backendImage):$(Build.BuildNumber)
          
          # Deploy Frontend
          docker run -d \
            --name moneywise-frontend-${{ parameters.Environment }} \
            --network moneywise-${{ parameters.Environment }} \
            -p 3000:3000 \
            $(frontendImage):$(Build.BuildNumber)

- stage: Verify
  jobs:
  - job: TestDeployment
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Wait for services to start
          sleep 30
          
          # Test Backend
          curl -f http://localhost:8081/health || exit 1
          echo "Backend is healthy"
          
          # Test Frontend
          curl -f http://localhost:3000 || exit 1
          echo "Frontend is accessible"
          
          echo "Deployment verification completed successfully"

- stage: Monitor
  jobs:
  - job: SetupMonitoring
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Configure Prometheus targets
          cat > prometheus.yml << EOF
          global:
            scrape_interval: 15s
          
          scrape_configs:
            - job_name: 'moneywise-backend'
              static_configs:
                - targets: ['localhost:8081']
            
            - job_name: 'moneywise-frontend'
              static_configs:
                - targets: ['localhost:3000']
          EOF
          
          # Start Prometheus
          docker run -d \
            --name prometheus-${{ parameters.Environment }} \
            --network moneywise-${{ parameters.Environment }} \
            -p 9090:9090 \
            -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus
          
          # Start Grafana
          docker run -d \
            --name grafana-${{ parameters.Environment }} \
            --network moneywise-${{ parameters.Environment }} \
            -p 3001:3000 \
            grafana/grafana
